# SPDX-License-Identifier: BSD-3-Clause
---
- name: Install dependencies for integration tests
  hosts: all
  vars:
    - rpmdependencies:
        - git
        - python3-pip
        - rsync

  tasks:
    - name: Install EPEL for RHEL and CentOS
      # yamllint disable-line rule:line-length
      command: "yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
      when: ansible_distribution in ["CentOS", "RedHat"]

    - name: Install rpm dependencies
      package:
        state: present
        name: "{{ rpmdependencies }}"

    - name: Install Pytest
      command: "pip3 install pytest"


# Import needed in order to install initscripts dependencies on the remote
# system.
- import_playbook: "../tests_default_initscripts.yml"

# Import needed in order to install Network Manager dependencies on the remote
# system.
- import_playbook: "../tests_default_nm.yml"


- name: Run Pytest tests
  hosts: all
  vars:
    - rundir: /run/system-roles-test
  tasks:
    - file:
        state: directory
        path: "{{ rundir }}/ansible"

    - file:
        state: touch
        path: "{{ rundir }}/ansible/__init__.py"

    - name: set collection paths
      set_fact:
        collection_paths: |
          {{
             (lookup("env","ANSIBLE_COLLECTIONS_PATH").split(":") +
             lookup("env","ANSIBLE_COLLECTIONS_PATHS").split(":") +
             lookup("config", "COLLECTIONS_PATHS")) |
             select | list
          }}

    - name: set search paths
      set_fact:
        modules_search_path: |
            {{
               (lookup("env", "ANSIBLE_LIBRARY").split(":") +
               ["../../library"] +
               lookup("config", "DEFAULT_MODULE_PATH")) |
               select | list
            }}
        module_utils_search_path: |
            {{
               (lookup("env", "ANSIBLE_MODULE_UTILS").split(":") +
               ["../../module_utils"] +
               lookup("config", "DEFAULT_MODULE_UTILS_PATH")) |
               select | list
            }}

    # the output should be something like
    # - path to parent directory to chdir to in order to use tar
    # - relative path under parent directory to tar
    # e.g. for the local role case
    # - ../..
    # - library
    # would translate to tar -C ../.. library
    # for the collection case
    # - /home/user/.ansible/collections
    # - ansible_collections/fedora/linux_system_roles/plugins/modules
    # would translate to tar -C /home/user/.ansible/collections \
    # ansible_collections/fedora/linux_system_roles/plugins/modules
    - name: find parent directory and path of modules
      shell: |
        set -euxo pipefail
        for dir in {{ modules_search_path | join(" ") }}; do
          if [ -f "$dir/network_connections.py" ]; then
            readlink -f "$(dirname "$dir")"
            basename "$dir"
            exit 0
          fi
        done
        for dir in {{ collection_paths | join(" ") }}; do
          cd "$dir"
          for subdir in ansible_collections/*/*/plugins/modules; do
            if [ -f "$subdir/network_connections.py" ]; then
              echo "$dir"
              echo "$subdir"
              exit 0
            fi
          done
        done
        echo network_connections.py not found
        exit 1
      delegate_to: localhost
      register: modules_parent_and_dir

    - name: find parent directory and path of module_utils
      shell: |
        set -euxo pipefail
        for dir in {{ module_utils_search_path | join(" ") }}; do
          if [ -d "$dir/network_lsr" ]; then
            readlink -f "$(dirname "$dir")"
            basename "$dir"
            exit 0
          fi
        done
        for dir in {{ collection_paths | join(" ") }}; do
          cd "$dir"
          for subdir in ansible_collections/*/*/plugins/module_utils; do
            if [ -d "$subdir/network_lsr" ]; then
              echo "$dir"
              echo "$subdir"
              exit 0
            fi
          done
        done
        echo network_lsr not found
        exit 1
      delegate_to: localhost
      register: module_utils_parent_and_dir

    - name: get tests directory
      set_fact:
        tests_directory: "{{ lookup('first_found', params) }}"
      vars:
        params:
          files:
            - tests
            - network
          paths:
            - "../.."

    - name: get tempfile for tar
      tempfile:
        prefix: lsrtest_
        suffix: ".tar"
      register: temptar
      delegate_to: localhost

    # TODO: using tar and copying the file is a workaround for the synchronize
    # module that does not work in test-harness. Related issue:
    # https://github.com/linux-system-roles/test-harness/issues/102
    #
    - name: Create Tar file
      command: >
        tar -cvf {{ temptar.path }} --exclude "*.pyc" --exclude "__pycache__"
            -C {{ tests_directory | realpath | dirname }}
            {{ tests_directory | basename }}
            -C {{ modules_parent_and_dir.stdout_lines[0] }}
            {{ modules_parent_and_dir.stdout_lines[1] }}
            -C {{ module_utils_parent_and_dir.stdout_lines[0] }}
            {{ module_utils_parent_and_dir.stdout_lines[1] }}
      delegate_to: localhost

    - name: Copy testrepo.tar to the remote system
      copy:
        src: "{{ temptar.path }}"
        dest: "{{ rundir }}"

    - name: Remove local testrepo.tar
      local_action: file path="{{ temptar.path }}" state=absent

    - name: Untar testrepo.tar
      command: tar xf {{ temptar.path | basename }}
      args:
        chdir: "{{ rundir }}"

    - name: Move module_utils to ansible directory
      shell: |
        if [ -d {{ rundir }}/module_utils ]; then
          mv {{ rundir }}/module_utils {{ rundir }}/ansible
        fi

    - name: Remove remote testrepo.tar
      file:
        path: "{{ rundir }}/{{ temptar.path | basename }}"
        state: absent

    - block:
        - name: Run pytest with nm
          command: >
            pytest {{ rundir }}/{{ tests_directory | basename }}/integration/
            --provider=nm
          register: playbook_run
          environment:
            PYTHONPATH: "{{
              rundir ~ '/' ~
              modules_parent_and_dir.stdout_lines[1] ~ ':' ~ rundir
            }}"
      always:
        - debug:
            var: playbook_run.stdout_lines

    - block:
        - name: Run pytest with initscripts
          command: >
            pytest {{ rundir }}/{{ tests_directory | basename }}/integration/
            --provider=initscripts
          register: playbook_run
          environment:
            PYTHONPATH: "{{
              rundir ~ '/' ~
              modules_parent_and_dir.stdout_lines[1] ~ ':' ~ rundir
            }}"
      always:
        - debug:
            var: playbook_run.stdout_lines
